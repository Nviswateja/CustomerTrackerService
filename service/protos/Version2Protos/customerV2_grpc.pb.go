// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: service/protos/Version2Protos/customerV2.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CustomerServiceV2Client is the client API for CustomerServiceV2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerServiceV2Client interface {
	GetCustomerWithName(ctx context.Context, in *GetCustomerMessageRequestV2, opts ...grpc.CallOption) (*CustomerDetailsV2Reply, error)
}

type customerServiceV2Client struct {
	cc grpc.ClientConnInterface
}

func NewCustomerServiceV2Client(cc grpc.ClientConnInterface) CustomerServiceV2Client {
	return &customerServiceV2Client{cc}
}

func (c *customerServiceV2Client) GetCustomerWithName(ctx context.Context, in *GetCustomerMessageRequestV2, opts ...grpc.CallOption) (*CustomerDetailsV2Reply, error) {
	out := new(CustomerDetailsV2Reply)
	err := c.cc.Invoke(ctx, "/customerV2.CustomerServiceV2/GetCustomerWithName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerServiceV2Server is the server API for CustomerServiceV2 service.
// All implementations must embed UnimplementedCustomerServiceV2Server
// for forward compatibility
type CustomerServiceV2Server interface {
	GetCustomerWithName(context.Context, *GetCustomerMessageRequestV2) (*CustomerDetailsV2Reply, error)
	mustEmbedUnimplementedCustomerServiceV2Server()
}

// UnimplementedCustomerServiceV2Server must be embedded to have forward compatible implementations.
type UnimplementedCustomerServiceV2Server struct {
}

func (UnimplementedCustomerServiceV2Server) GetCustomerWithName(context.Context, *GetCustomerMessageRequestV2) (*CustomerDetailsV2Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerWithName not implemented")
}
func (UnimplementedCustomerServiceV2Server) mustEmbedUnimplementedCustomerServiceV2Server() {}

// UnsafeCustomerServiceV2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerServiceV2Server will
// result in compilation errors.
type UnsafeCustomerServiceV2Server interface {
	mustEmbedUnimplementedCustomerServiceV2Server()
}

func RegisterCustomerServiceV2Server(s grpc.ServiceRegistrar, srv CustomerServiceV2Server) {
	s.RegisterService(&CustomerServiceV2_ServiceDesc, srv)
}

func _CustomerServiceV2_GetCustomerWithName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerMessageRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceV2Server).GetCustomerWithName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customerV2.CustomerServiceV2/GetCustomerWithName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceV2Server).GetCustomerWithName(ctx, req.(*GetCustomerMessageRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomerServiceV2_ServiceDesc is the grpc.ServiceDesc for CustomerServiceV2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerServiceV2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "customerV2.CustomerServiceV2",
	HandlerType: (*CustomerServiceV2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCustomerWithName",
			Handler:    _CustomerServiceV2_GetCustomerWithName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/protos/Version2Protos/customerV2.proto",
}
